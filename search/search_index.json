{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Roerich Roerich is a python library for online and offline change point detection in time series data. It was named after the painter Nicholas Roerich, known as the Master of the Mountains. Read more at: https://www.roerich.org. Fragment of \"Himalayas\", 1933 Currently, the library contains official implementations of change point detection algorithms based on direct density ratio estimation from the following articles: Mikhail Hushchyn and Andrey Ustyuzhanin. \u201cGeneralization of Change-Point Detection in Time Series Data Based on Direct Density Ratio Estimation.\u201d J. Comput. Sci. 53 (2021): 101385. [journal] [arxiv] Mikhail Hushchyn, Kenenbek Arzymatov and Denis Derkach. \u201cOnline Neural Networks for Change-Point Detection.\u201d ArXiv abs/2010.01388 (2020). [arxiv] Dependencies and install pip install roerich or git clone https://github.com/HSE-LAMBDA/roerich.git cd roerich python setup.py install Basic usage The following code snippet generates a noisy synthetic data, performs change point detection, and displays the results. If you use own dataset, make sure that it has a shape (seq_len, n_dims) . import roerich from roerich.algorithms import ChangePointDetectionClassifier # generate time series X, cps_true = roerich.generate_dataset(period=200, N_tot=2000) # detection cpd = ChangePointDetectionClassifier() score, cps_pred = cpd.predict(X) # visualization roerich.display(X, cps_true, score, cps_pred) Support Documentation: https://hse-lambda.github.io/roerich For any usage questions, suggestions and bugs use the issue page , please. Related libraries Thanks to all our contributors License BSD 2-Clause License Copyright (c) 2017, ENS Paris-Saclay, CNRS All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Home"},{"location":"#welcome-to-roerich","text":"Roerich is a python library for online and offline change point detection in time series data. It was named after the painter Nicholas Roerich, known as the Master of the Mountains. Read more at: https://www.roerich.org. Fragment of \"Himalayas\", 1933 Currently, the library contains official implementations of change point detection algorithms based on direct density ratio estimation from the following articles: Mikhail Hushchyn and Andrey Ustyuzhanin. \u201cGeneralization of Change-Point Detection in Time Series Data Based on Direct Density Ratio Estimation.\u201d J. Comput. Sci. 53 (2021): 101385. [journal] [arxiv] Mikhail Hushchyn, Kenenbek Arzymatov and Denis Derkach. \u201cOnline Neural Networks for Change-Point Detection.\u201d ArXiv abs/2010.01388 (2020). [arxiv]","title":"Welcome to Roerich"},{"location":"#dependencies-and-install","text":"pip install roerich or git clone https://github.com/HSE-LAMBDA/roerich.git cd roerich python setup.py install","title":"Dependencies and install"},{"location":"#basic-usage","text":"The following code snippet generates a noisy synthetic data, performs change point detection, and displays the results. If you use own dataset, make sure that it has a shape (seq_len, n_dims) . import roerich from roerich.algorithms import ChangePointDetectionClassifier # generate time series X, cps_true = roerich.generate_dataset(period=200, N_tot=2000) # detection cpd = ChangePointDetectionClassifier() score, cps_pred = cpd.predict(X) # visualization roerich.display(X, cps_true, score, cps_pred)","title":"Basic usage"},{"location":"#support","text":"Documentation: https://hse-lambda.github.io/roerich For any usage questions, suggestions and bugs use the issue page , please.","title":"Support"},{"location":"#related-libraries","text":"","title":"Related libraries"},{"location":"#thanks-to-all-our-contributors","text":"","title":"Thanks to all our contributors"},{"location":"#license","text":"BSD 2-Clause License Copyright (c) 2017, ENS Paris-Saclay, CNRS All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"about/","text":"Change point Formal definition Abrupt change of time series behaviour is called a change-point. Consider a d- dimensional signal with a change point at a moment \\nu : x_1, x_2, \\cdots, x_{\\nu-1}, x_{\\nu}, x_{\\nu+1}, x_{\\nu+2}, \\cdots In the most general case, the observations are arbitrary dependent and nonidentically distributed. Change point is a moment of time, when distribution of time series observations changes. Thus, it can be described as changing of conditional pre-change densities p_0(x_i|x_1, \\cdots, x_{i-1}) for i \\le \\nu to conditional post-change densities p_1(x_i|x_1, \\cdots, x_{i-1}) for i > \\nu . In a typical setup this is an unsupervised task with unknown signal distributions. Figure 1 shows an example with several change points and results of their detection. Figure 1. Example of change points. Applications There is a range of various applications of change point detection [1]: quality control of production process, structural health monitoring of wind turbines, and aircraft, detecting multiple sensor faults, detecting road traffic incidents or changes in highway traffic condition, chemical process control, physiological data analysis, surveillance of daily disease counts, nanoscale analysis of soft biomaterials, biosurveillance, radio-astronomy and interferometry, spectrum sensing in cognitive radio systems, leak detection in water channels, environmental monitoring, handling climate changes, navigation systems monitoring, human motion analysis, video scene analysis, sequential steganography, biometric identification, onset detection in music signals, detecting changes in large payment card datasets, distributed systems monitoring, detection of intrusion, viruses, and other denial of service (DoS) attacks, segmentation of signals and images, tracking the preferences of users in recommendation systems, seismic data processing, analysis of financial data and others. [1] Alexander Tartakovsky, Igor Nikiforov, and Michele Basseville. 2014. Sequential Analysis: Hypothesis Testing and Changepoint Detection (1st. ed.). Chapman & Hall/CRC.","title":"Change point"},{"location":"about/#change-point","text":"","title":"Change point"},{"location":"about/#formal-definition","text":"Abrupt change of time series behaviour is called a change-point. Consider a d- dimensional signal with a change point at a moment \\nu : x_1, x_2, \\cdots, x_{\\nu-1}, x_{\\nu}, x_{\\nu+1}, x_{\\nu+2}, \\cdots In the most general case, the observations are arbitrary dependent and nonidentically distributed. Change point is a moment of time, when distribution of time series observations changes. Thus, it can be described as changing of conditional pre-change densities p_0(x_i|x_1, \\cdots, x_{i-1}) for i \\le \\nu to conditional post-change densities p_1(x_i|x_1, \\cdots, x_{i-1}) for i > \\nu . In a typical setup this is an unsupervised task with unknown signal distributions. Figure 1 shows an example with several change points and results of their detection. Figure 1. Example of change points.","title":"Formal definition"},{"location":"about/#applications","text":"There is a range of various applications of change point detection [1]: quality control of production process, structural health monitoring of wind turbines, and aircraft, detecting multiple sensor faults, detecting road traffic incidents or changes in highway traffic condition, chemical process control, physiological data analysis, surveillance of daily disease counts, nanoscale analysis of soft biomaterials, biosurveillance, radio-astronomy and interferometry, spectrum sensing in cognitive radio systems, leak detection in water channels, environmental monitoring, handling climate changes, navigation systems monitoring, human motion analysis, video scene analysis, sequential steganography, biometric identification, onset detection in music signals, detecting changes in large payment card datasets, distributed systems monitoring, detection of intrusion, viruses, and other denial of service (DoS) attacks, segmentation of signals and images, tracking the preferences of users in recommendation systems, seismic data processing, analysis of financial data and others. [1] Alexander Tartakovsky, Igor Nikiforov, and Michele Basseville. 2014. Sequential Analysis: Hypothesis Testing and Changepoint Detection (1st. ed.). Chapman & Hall/CRC.","title":"Applications"},{"location":"cpdclassifier/","text":"ChangePointDetectionClassifier Description ChangePointDetectionClassifier [1] is an offline change point detection algorithm based on binary classifiers. It scans a signal with a two consecutive windows with some width. The method uses a binary classifier for direct estimation of the probability density ratio for observations inside these windows. Then, it calculates the symmetrical Kullback-Leibler (KL_sym) divergence based on these ratios and considers it as a change point detection score for the windows pair. [1] Mikhail Hushchyn and Andrey Ustyuzhanin. \u201cGeneralization of Change-Point Detection in Time Series Data Based on Direct Density Ratio Estimation.\u201d J. Comput. Sci. 53 (2021): 101385. [journal] [arxiv] Usage import roerich from roerich.algorithms import ChangePointDetectionClassifier from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis # generate time series X, cps_true = roerich.generate_dataset(period=200, N_tot=2000) # sklearn-like binary classifier clf = QuadraticDiscriminantAnalysis() # change points detection cpd = ChangePointDetectionClassifier(base_classifier=clf, metric='KL_sym', periods=1, window_size=100, step=1, n_runs=1) score, cps_pred = cpd.predict(X) # visualization roerich.display(X, cps_true, score, cps_pred)","title":"ChangePointDetectionClassifier"},{"location":"cpdclassifier/#changepointdetectionclassifier","text":"","title":"ChangePointDetectionClassifier"},{"location":"cpdclassifier/#description","text":"ChangePointDetectionClassifier [1] is an offline change point detection algorithm based on binary classifiers. It scans a signal with a two consecutive windows with some width. The method uses a binary classifier for direct estimation of the probability density ratio for observations inside these windows. Then, it calculates the symmetrical Kullback-Leibler (KL_sym) divergence based on these ratios and considers it as a change point detection score for the windows pair. [1] Mikhail Hushchyn and Andrey Ustyuzhanin. \u201cGeneralization of Change-Point Detection in Time Series Data Based on Direct Density Ratio Estimation.\u201d J. Comput. Sci. 53 (2021): 101385. [journal] [arxiv]","title":"Description"},{"location":"cpdclassifier/#usage","text":"import roerich from roerich.algorithms import ChangePointDetectionClassifier from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis # generate time series X, cps_true = roerich.generate_dataset(period=200, N_tot=2000) # sklearn-like binary classifier clf = QuadraticDiscriminantAnalysis() # change points detection cpd = ChangePointDetectionClassifier(base_classifier=clf, metric='KL_sym', periods=1, window_size=100, step=1, n_runs=1) score, cps_pred = cpd.predict(X) # visualization roerich.display(X, cps_true, score, cps_pred)","title":"Usage"},{"location":"cpdrulsif/","text":"ChangePointDetectionRuLSIF Description ChangePointDetectionRuLSIF [1] is an offline change point detection algorithm based on RuLSIF [2, 3] regressors. It scans a signal with a two consecutive windows with some width. The method uses a RuLSIF regression for direct estimation of the probability density ratio for observations inside these windows. Then, it calculates the Pearson (PE) divergence based on these ratios and considers it as a change point detection score for the windows pair. [1] Mikhail Hushchyn and Andrey Ustyuzhanin. \u201cGeneralization of Change-Point Detection in Time Series Data Based on Direct Density Ratio Estimation.\u201d J. Comput. Sci. 53 (2021): 101385. [journal] [arxiv] [2] Makoto Yamada, Taiji Suzuki, Takafumi Kanamori, Hirotaka Hachiya, Masashi Sugiyama; Relative Density-Ratio Estimation for Robust Distribution Comparison. Neural Comput 2013; 25 (5): 1324\u20131370. [DOI] [3] Song Liu, Makoto Yamada, Nigel Collier, Masashi Sugiyama, Change-point detection in time-series data by relative density-ratio estimation, Neural Networks, V. 43, 2013, pp. 72-83. [DOI] Usage import roerich from roerich.algorithms import ChangePointDetectionRuLSIF from roerich.algorithms import GBDTRuLSIFRegressor # generate time series X, cps_true = roerich.generate_dataset(period=200, N_tot=2000) # RuLSIF regressor reg = GBDTRuLSIFRegressor(n_estimators=10) # change points detection cpd = ChangePointDetectionRuLSIF(base_regressor=reg, metric='PE', periods=1, window_size=100, step=5, n_runs=1) score, cps_pred = cpd.predict(X) # visualization roerich.display(X, cps_true, score, cps_pred)","title":"ChangePointDetectionRuLSIF"},{"location":"cpdrulsif/#changepointdetectionrulsif","text":"","title":"ChangePointDetectionRuLSIF"},{"location":"cpdrulsif/#description","text":"ChangePointDetectionRuLSIF [1] is an offline change point detection algorithm based on RuLSIF [2, 3] regressors. It scans a signal with a two consecutive windows with some width. The method uses a RuLSIF regression for direct estimation of the probability density ratio for observations inside these windows. Then, it calculates the Pearson (PE) divergence based on these ratios and considers it as a change point detection score for the windows pair. [1] Mikhail Hushchyn and Andrey Ustyuzhanin. \u201cGeneralization of Change-Point Detection in Time Series Data Based on Direct Density Ratio Estimation.\u201d J. Comput. Sci. 53 (2021): 101385. [journal] [arxiv] [2] Makoto Yamada, Taiji Suzuki, Takafumi Kanamori, Hirotaka Hachiya, Masashi Sugiyama; Relative Density-Ratio Estimation for Robust Distribution Comparison. Neural Comput 2013; 25 (5): 1324\u20131370. [DOI] [3] Song Liu, Makoto Yamada, Nigel Collier, Masashi Sugiyama, Change-point detection in time-series data by relative density-ratio estimation, Neural Networks, V. 43, 2013, pp. 72-83. [DOI]","title":"Description"},{"location":"cpdrulsif/#usage","text":"import roerich from roerich.algorithms import ChangePointDetectionRuLSIF from roerich.algorithms import GBDTRuLSIFRegressor # generate time series X, cps_true = roerich.generate_dataset(period=200, N_tot=2000) # RuLSIF regressor reg = GBDTRuLSIFRegressor(n_estimators=10) # change points detection cpd = ChangePointDetectionRuLSIF(base_regressor=reg, metric='PE', periods=1, window_size=100, step=5, n_runs=1) score, cps_pred = cpd.predict(X) # visualization roerich.display(X, cps_true, score, cps_pred)","title":"Usage"},{"location":"gbdtrulsif/","text":"GBDTRuLSIFRegressor Description GBDTRuLSIFRegressor [1] is an algorithm for the direct density ratio estimation for two samples. It is a Gradient Boosting over Decision Trees model with the RuLSIF [2] loss function. The algorithm takes two samples and learns the ratio of their probability densities without estimation of individual distributions. The density ratios help to calculate of different dissimilarity scores between the samples, that are used in change-point detection and other applications. [1] Mikhail Hushchyn and Andrey Ustyuzhanin. \u201cGeneralization of Change-Point Detection in Time Series Data Based on Direct Density Ratio Estimation.\u201d J. Comput. Sci. 53 (2021): 101385. [journal] [arxiv] [2] Makoto Yamada, Taiji Suzuki, Takafumi Kanamori, Hirotaka Hachiya, Masashi Sugiyama; Relative Density-Ratio Estimation for Robust Distribution Comparison. Neural Comput 2013; 25 (5): 1324\u20131370. [DOI] Usage from roerich.algorithms import GBDTRuLSIFRegressor from scipy.stats import norm, uniform import numpy as np N = 10000 # generate samples p0 = uniform(-5, 10) p1 = norm(0, 1) X = np.concatenate((p0.rvs((N, 1)), p1.rvs((N, 1)))) y = np.array([0]*N + [1]*N) # true density ratio true_ratio = p1.pdf(X) / p0.pdf(X) # direct density ratio estimation reg = GBDTRuLSIFRegressor(n_estimators=100, learning_rate=0.2, max_depth=2, alpha=0) reg.fit(X, y) pred_ratio = reg.predict_proba_ratio(X) # visualization plt.scatter(X, pred_ratio, label='pred') plt.scatter(X, true_ratio, label='true') plt.legend() plt.show()","title":"GBDTRuLSIFRegressor"},{"location":"gbdtrulsif/#gbdtrulsifregressor","text":"","title":"GBDTRuLSIFRegressor"},{"location":"gbdtrulsif/#description","text":"GBDTRuLSIFRegressor [1] is an algorithm for the direct density ratio estimation for two samples. It is a Gradient Boosting over Decision Trees model with the RuLSIF [2] loss function. The algorithm takes two samples and learns the ratio of their probability densities without estimation of individual distributions. The density ratios help to calculate of different dissimilarity scores between the samples, that are used in change-point detection and other applications. [1] Mikhail Hushchyn and Andrey Ustyuzhanin. \u201cGeneralization of Change-Point Detection in Time Series Data Based on Direct Density Ratio Estimation.\u201d J. Comput. Sci. 53 (2021): 101385. [journal] [arxiv] [2] Makoto Yamada, Taiji Suzuki, Takafumi Kanamori, Hirotaka Hachiya, Masashi Sugiyama; Relative Density-Ratio Estimation for Robust Distribution Comparison. Neural Comput 2013; 25 (5): 1324\u20131370. [DOI]","title":"Description"},{"location":"gbdtrulsif/#usage","text":"from roerich.algorithms import GBDTRuLSIFRegressor from scipy.stats import norm, uniform import numpy as np N = 10000 # generate samples p0 = uniform(-5, 10) p1 = norm(0, 1) X = np.concatenate((p0.rvs((N, 1)), p1.rvs((N, 1)))) y = np.array([0]*N + [1]*N) # true density ratio true_ratio = p1.pdf(X) / p0.pdf(X) # direct density ratio estimation reg = GBDTRuLSIFRegressor(n_estimators=100, learning_rate=0.2, max_depth=2, alpha=0) reg.fit(X, y) pred_ratio = reg.predict_proba_ratio(X) # visualization plt.scatter(X, pred_ratio, label='pred') plt.scatter(X, true_ratio, label='true') plt.legend() plt.show()","title":"Usage"},{"location":"nnrulsif/","text":"NNRuLSIFRegressor Description NNRuLSIFRegressor [1] is an algorithm for the direct density ratio estimation for two samples. It is a Neural Network model with the RuLSIF [2] loss function. The algorithm takes two samples and learns the ratio of their probability densities without estimation of individual distributions. The density ratios help to calculate of different dissimilarity scores between the samples, that are used in change-point detection and other applications. [1] Mikhail Hushchyn and Andrey Ustyuzhanin. \u201cGeneralization of Change-Point Detection in Time Series Data Based on Direct Density Ratio Estimation.\u201d J. Comput. Sci. 53 (2021): 101385. [journal] [arxiv] [2] Makoto Yamada, Taiji Suzuki, Takafumi Kanamori, Hirotaka Hachiya, Masashi Sugiyama; Relative Density-Ratio Estimation for Robust Distribution Comparison. Neural Comput 2013; 25 (5): 1324\u20131370. [DOI] Usage from roerich.algorithms import NNRuLSIFRegressor from scipy.stats import norm, uniform import numpy as np N = 1000 # generate samples p0 = uniform(-5, 10) p1 = norm(0, 1) X = np.concatenate((p0.rvs((N, 1)), p1.rvs((N, 1)))) y = np.array([0]*N + [1]*N) # true density ratio true_ratio = p1.pdf(X) / p0.pdf(X) # direct density ratio estimation reg = NNRuLSIFRegressor(n_hidden=10, n_epochs=100, batch_size=64, lr=0.01, l2=0.001, alpha=0.) reg.fit(X, y) pred_ratio = reg.predict_proba_ratio(X) # visualization plt.scatter(X, pred_ratio, label='pred') plt.scatter(X, true_ratio, label='true') plt.legend() plt.show()","title":"NNRuLSIFRegressor"},{"location":"nnrulsif/#nnrulsifregressor","text":"","title":"NNRuLSIFRegressor"},{"location":"nnrulsif/#description","text":"NNRuLSIFRegressor [1] is an algorithm for the direct density ratio estimation for two samples. It is a Neural Network model with the RuLSIF [2] loss function. The algorithm takes two samples and learns the ratio of their probability densities without estimation of individual distributions. The density ratios help to calculate of different dissimilarity scores between the samples, that are used in change-point detection and other applications. [1] Mikhail Hushchyn and Andrey Ustyuzhanin. \u201cGeneralization of Change-Point Detection in Time Series Data Based on Direct Density Ratio Estimation.\u201d J. Comput. Sci. 53 (2021): 101385. [journal] [arxiv] [2] Makoto Yamada, Taiji Suzuki, Takafumi Kanamori, Hirotaka Hachiya, Masashi Sugiyama; Relative Density-Ratio Estimation for Robust Distribution Comparison. Neural Comput 2013; 25 (5): 1324\u20131370. [DOI]","title":"Description"},{"location":"nnrulsif/#usage","text":"from roerich.algorithms import NNRuLSIFRegressor from scipy.stats import norm, uniform import numpy as np N = 1000 # generate samples p0 = uniform(-5, 10) p1 = norm(0, 1) X = np.concatenate((p0.rvs((N, 1)), p1.rvs((N, 1)))) y = np.array([0]*N + [1]*N) # true density ratio true_ratio = p1.pdf(X) / p0.pdf(X) # direct density ratio estimation reg = NNRuLSIFRegressor(n_hidden=10, n_epochs=100, batch_size=64, lr=0.01, l2=0.001, alpha=0.) reg.fit(X, y) pred_ratio = reg.predict_proba_ratio(X) # visualization plt.scatter(X, pred_ratio, label='pred') plt.scatter(X, true_ratio, label='true') plt.legend() plt.show()","title":"Usage"},{"location":"onnc/","text":"OnlineNNClassifier Description OnlineNNClassifier [1] is an online change point detection algorithm based on a binary classifier. It scans a signal with a two windows with small width (1, 5, 10) and a lag (50, 100) between them. The method uses a neural network classifier for direct estimation of the probability density ratio for observations inside these windows. We train the NN in online manner: update its weights with new observations of the signal. Then, it calculates the symmetrical Kullback-Leibler (KL_sym) divergence based on these ratios and considers it as a change point detection score for the windows pair. [1] Mikhail Hushchyn, Kenenbek Arzymatov and Denis Derkach. \u201cOnline Neural Networks for Change-Point Detection.\u201d ArXiv abs/2010.01388 (2020). [arxiv] Usage import roerich from roerich.algorithms import OnlineNNClassifier # generate time series X, cps_true = roerich.generate_dataset(period=200, N_tot=2000) # change points detection cpd = OnlineNNClassifier(net='default', scaler=\"default\", metric=\"KL_sym\", periods=1, window_size=10, lag_size=100, step=5, n_epochs=10, lr=0.01, lam=0.0001, optimizer=\"Adam\") score, cps_pred = cpd.predict(X) # visualization roerich.display(X, cps_true, score, cps_pred)","title":"OnlineNNClassifier"},{"location":"onnc/#onlinennclassifier","text":"","title":"OnlineNNClassifier"},{"location":"onnc/#description","text":"OnlineNNClassifier [1] is an online change point detection algorithm based on a binary classifier. It scans a signal with a two windows with small width (1, 5, 10) and a lag (50, 100) between them. The method uses a neural network classifier for direct estimation of the probability density ratio for observations inside these windows. We train the NN in online manner: update its weights with new observations of the signal. Then, it calculates the symmetrical Kullback-Leibler (KL_sym) divergence based on these ratios and considers it as a change point detection score for the windows pair. [1] Mikhail Hushchyn, Kenenbek Arzymatov and Denis Derkach. \u201cOnline Neural Networks for Change-Point Detection.\u201d ArXiv abs/2010.01388 (2020). [arxiv]","title":"Description"},{"location":"onnc/#usage","text":"import roerich from roerich.algorithms import OnlineNNClassifier # generate time series X, cps_true = roerich.generate_dataset(period=200, N_tot=2000) # change points detection cpd = OnlineNNClassifier(net='default', scaler=\"default\", metric=\"KL_sym\", periods=1, window_size=10, lag_size=100, step=5, n_epochs=10, lr=0.01, lam=0.0001, optimizer=\"Adam\") score, cps_pred = cpd.predict(X) # visualization roerich.display(X, cps_true, score, cps_pred)","title":"Usage"},{"location":"onnr/","text":"OnlineNNRuLSIF Description OnlineNNRuLSIF [1] is an online change point detection algorithm based on a RuLSIF [2, 3] regressor. It scans a signal with a two windows with small width (1, 5, 10) and a lag (50, 100) between them. The method uses a neural network RuLSIF regressor for direct estimation of the probability density ratio for observations inside these windows. We train the NN in online manner: update its weights with new observations of the signal. Then, it calculates the Pearson (PE) divergence based on these ratios and considers it as a change point detection score for the windows pair. [1] Mikhail Hushchyn, Kenenbek Arzymatov and Denis Derkach. \u201cOnline Neural Networks for Change-Point Detection.\u201d ArXiv abs/2010.01388 (2020). [arxiv] [2] Makoto Yamada, Taiji Suzuki, Takafumi Kanamori, Hirotaka Hachiya, Masashi Sugiyama; Relative Density-Ratio Estimation for Robust Distribution Comparison. Neural Comput 2013; 25 (5): 1324\u20131370. [DOI] [3] Song Liu, Makoto Yamada, Nigel Collier, Masashi Sugiyama, Change-point detection in time-series data by relative density-ratio estimation, Neural Networks, V. 43, 2013, pp. 72-83. [DOI] Usage import roerich from roerich.algorithms import OnlineNNRuLSIF # generate time series X, cps_true = roerich.generate_dataset(period=200, N_tot=2000) # change points detection cpd = OnlineNNRuLSIF(alpha=0.2, net='default', scaler=\"default\", periods=1, window_size=10, lag_size=100, step=5, n_epochs=10, lr=0.01, lam=0.001, optimizer=\"Adam\") score, cps_pred = cpd.predict(X) # visualization roerich.display(X, cps_true, score, cps_pred)","title":"OnlineNNRuLSIF"},{"location":"onnr/#onlinennrulsif","text":"","title":"OnlineNNRuLSIF"},{"location":"onnr/#description","text":"OnlineNNRuLSIF [1] is an online change point detection algorithm based on a RuLSIF [2, 3] regressor. It scans a signal with a two windows with small width (1, 5, 10) and a lag (50, 100) between them. The method uses a neural network RuLSIF regressor for direct estimation of the probability density ratio for observations inside these windows. We train the NN in online manner: update its weights with new observations of the signal. Then, it calculates the Pearson (PE) divergence based on these ratios and considers it as a change point detection score for the windows pair. [1] Mikhail Hushchyn, Kenenbek Arzymatov and Denis Derkach. \u201cOnline Neural Networks for Change-Point Detection.\u201d ArXiv abs/2010.01388 (2020). [arxiv] [2] Makoto Yamada, Taiji Suzuki, Takafumi Kanamori, Hirotaka Hachiya, Masashi Sugiyama; Relative Density-Ratio Estimation for Robust Distribution Comparison. Neural Comput 2013; 25 (5): 1324\u20131370. [DOI] [3] Song Liu, Makoto Yamada, Nigel Collier, Masashi Sugiyama, Change-point detection in time-series data by relative density-ratio estimation, Neural Networks, V. 43, 2013, pp. 72-83. [DOI]","title":"Description"},{"location":"onnr/#usage","text":"import roerich from roerich.algorithms import OnlineNNRuLSIF # generate time series X, cps_true = roerich.generate_dataset(period=200, N_tot=2000) # change points detection cpd = OnlineNNRuLSIF(alpha=0.2, net='default', scaler=\"default\", periods=1, window_size=10, lag_size=100, step=5, n_epochs=10, lr=0.01, lam=0.001, optimizer=\"Adam\") score, cps_pred = cpd.predict(X) # visualization roerich.display(X, cps_true, score, cps_pred)","title":"Usage"}]}